package pro.belbix.tim.properties;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.google.protobuf.InvalidProtocolBufferException;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Hex;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;
import org.springframework.validation.annotation.Validated;
import pro.belbix.tim.protobuf.srsi.Srsi;

@Configuration
@Validated
@ConfigurationProperties(prefix = "tim.strategies.srsi2")
@Getter
@Setter
@ToString
@JsonIgnoreProperties(ignoreUnknown = true)
//@PropertySource(name = "srsi2", value = "classpath:srsi2.yml", factory = YamlPropertyLoaderFactory.class)
public class Srsi2Properties implements StrategyPropertiesI {
    //COMMON
    private boolean useMarketOrders = false;
    private boolean useLong = true;
    private boolean useShort = true;
    private boolean computeSrsi = true;
    private boolean printProcessing = true;

    private String nodes

    public Srsi toSrsi() {
        try {
            return Srsi.parseFrom(Hex.decodeHex(getNodes()));
        } catch (InvalidProtocolBufferException | DecoderException e) {
            System.out.println("Error decode srsi" + e.getMessage());
            return null;
        }
    }
}
